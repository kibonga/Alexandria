@page "/authors/"
@using Alexandria.Blazor.Server.Ui.Models

@*Legacy: @inject IClient _httpClient*@
@inject IAuthorService _authorService
@inject IJSRuntime _js

<h3>Author List</h3>

@if(!response.Success)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if(Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading...</h4>
        </div>
    }
    else
    {
        <AuthorizeView Roles="@Roles.Admin">
        <a class="btn btn-dark" href="/authors/create">
            <span class="oi oi-plus"></span>
            Create
        </a>
        </AuthorizeView>
        <table class="table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var author in Authors)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>
                            <a class="btn btn-primary" href="/authors/details/@author.Id">
                                <span class="oi oi-info" aria-hidden="true"></span>
                                Details
                            </a>
                            <AuthorizeView Roles="@Roles.Admin">
                                <a class="btn btn-warning" href="/authors/update/@author.Id">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                    Edit
                                </a>
                                <button class="btn btn-danger" @onclick="@(() => Delete(@author.Id))">
                                    <span class="oi oi-delete" aria-hidden="true"></span>
                                    Delete
                                </button>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<AuthorReadOnlyDto> Authors;
    private Response<List<AuthorReadOnlyDto>> response = new Response<List<AuthorReadOnlyDto>> { Success = true };

    protected override async Task OnInitializedAsync()
    {
        // Legacy: Authors = (await _httpClient.AuthorsAllAsync()).ToList();
        response = await _authorService.Get();

        if(response.Success)
        {
            Authors = response.Data;
        }
    }

    private async Task Delete(int authorId)
    {
        var author = Authors.FirstOrDefault(x => x.Id == authorId);
        var confirm = await _js.InvokeAsync<bool>("confirm", $"You are about to Delete {author.FirstName} {author.LastName}");

        if(confirm)
        {
            var response = await _authorService.Delete(authorId);
            if(response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }

}
